// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tick.proto

package main

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Tick struct {
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Tick) Reset()         { *m = Tick{} }
func (m *Tick) String() string { return proto.CompactTextString(m) }
func (*Tick) ProtoMessage()    {}
func (*Tick) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f85c045bfd6a4ea, []int{0}
}

func (m *Tick) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tick.Unmarshal(m, b)
}
func (m *Tick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tick.Marshal(b, m, deterministic)
}
func (m *Tick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tick.Merge(m, src)
}
func (m *Tick) XXX_Size() int {
	return xxx_messageInfo_Tick.Size(m)
}
func (m *Tick) XXX_DiscardUnknown() {
	xxx_messageInfo_Tick.DiscardUnknown(m)
}

var xxx_messageInfo_Tick proto.InternalMessageInfo

func (m *Tick) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func init() {
	proto.RegisterType((*Tick)(nil), "main.Tick")
}

func init() { proto.RegisterFile("tick.proto", fileDescriptor_8f85c045bfd6a4ea) }

var fileDescriptor_8f85c045bfd6a4ea = []byte{
	// 161 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0xc9, 0x4c, 0xce,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9, 0x4d, 0xcc, 0xcc, 0x93, 0x92, 0x4f, 0xcf,
	0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0x8b, 0x25, 0x95, 0xa6, 0xe9, 0x97, 0x64, 0xe6, 0xa6, 0x16,
	0x97, 0x24, 0xe6, 0x16, 0x40, 0x94, 0x49, 0x49, 0xa3, 0x2b, 0x48, 0xcd, 0x2d, 0x28, 0xa9, 0x84,
	0x48, 0x2a, 0x39, 0x70, 0xb1, 0x84, 0x64, 0x26, 0x67, 0x0b, 0x59, 0x70, 0x71, 0xc2, 0xf5, 0x49,
	0x30, 0x2a, 0x30, 0x6a, 0x70, 0x1b, 0x49, 0xe9, 0x41, 0x34, 0xea, 0xc1, 0x34, 0xea, 0x85, 0xc0,
	0x54, 0x04, 0x21, 0x14, 0x1b, 0xd9, 0x73, 0x71, 0x83, 0x4c, 0x08, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c,
	0x4e, 0x15, 0x32, 0xe0, 0x62, 0xf3, 0xc9, 0x2c, 0x2e, 0x49, 0xcd, 0x13, 0x12, 0xc3, 0xd0, 0xef,
	0x0a, 0xb2, 0x58, 0x8a, 0x4b, 0x0f, 0xe4, 0x6e, 0x3d, 0x90, 0x26, 0x25, 0x06, 0x03, 0xc6, 0x24,
	0x36, 0xb0, 0xbc, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x41, 0x91, 0xf1, 0xdb, 0x00, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TickServiceClient is the client API for TickService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TickServiceClient interface {
	Listen(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (TickService_ListenClient, error)
}

type tickServiceClient struct {
	cc *grpc.ClientConn
}

func NewTickServiceClient(cc *grpc.ClientConn) TickServiceClient {
	return &tickServiceClient{cc}
}

func (c *tickServiceClient) Listen(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (TickService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TickService_serviceDesc.Streams[0], "/main.TickService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &tickServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TickService_ListenClient interface {
	Recv() (*Tick, error)
	grpc.ClientStream
}

type tickServiceListenClient struct {
	grpc.ClientStream
}

func (x *tickServiceListenClient) Recv() (*Tick, error) {
	m := new(Tick)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TickServiceServer is the server API for TickService service.
type TickServiceServer interface {
	Listen(*empty.Empty, TickService_ListenServer) error
}

// UnimplementedTickServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTickServiceServer struct {
}

func (*UnimplementedTickServiceServer) Listen(req *empty.Empty, srv TickService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}

func RegisterTickServiceServer(s *grpc.Server, srv TickServiceServer) {
	s.RegisterService(&_TickService_serviceDesc, srv)
}

func _TickService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TickServiceServer).Listen(m, &tickServiceListenServer{stream})
}

type TickService_ListenServer interface {
	Send(*Tick) error
	grpc.ServerStream
}

type tickServiceListenServer struct {
	grpc.ServerStream
}

func (x *tickServiceListenServer) Send(m *Tick) error {
	return x.ServerStream.SendMsg(m)
}

var _TickService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.TickService",
	HandlerType: (*TickServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _TickService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tick.proto",
}
